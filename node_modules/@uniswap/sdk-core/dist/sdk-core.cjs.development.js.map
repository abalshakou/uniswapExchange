{"version":3,"file":"sdk-core.cjs.development.js","sources":["../src/constants.ts","../src/entities/fractions/fraction.ts","../src/entities/fractions/currencyAmount.ts","../src/entities/fractions/percent.ts","../src/entities/fractions/price.ts","../src/entities/baseCurrency.ts","../src/entities/nativeCurrency.ts","../src/utils/validateAndParseAddress.ts","../src/entities/token.ts","../src/entities/weth9.ts","../src/entities/ether.ts","../src/utils/computePriceImpact.ts","../src/utils/sortedInsert.ts","../src/utils/sqrt.ts"],"sourcesContent":["import JSBI from 'jsbi'\n\n// exports for external consumption\nexport type BigintIsh = JSBI | string | number\n\nexport enum TradeType {\n  EXACT_INPUT,\n  EXACT_OUTPUT\n}\n\nexport enum Rounding {\n  ROUND_DOWN,\n  ROUND_HALF_UP,\n  ROUND_UP\n}\n\nexport const MaxUint256 = JSBI.BigInt('0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff')\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\nimport _Decimal from 'decimal.js-light'\nimport _Big, { RoundingMode } from 'big.js'\nimport toFormat from 'toformat'\n\nimport { BigintIsh, Rounding } from '../../constants'\n\nconst Decimal = toFormat(_Decimal)\nconst Big = toFormat(_Big)\n\nconst toSignificantRounding = {\n  [Rounding.ROUND_DOWN]: Decimal.ROUND_DOWN,\n  [Rounding.ROUND_HALF_UP]: Decimal.ROUND_HALF_UP,\n  [Rounding.ROUND_UP]: Decimal.ROUND_UP\n}\n\nconst toFixedRounding = {\n  [Rounding.ROUND_DOWN]: RoundingMode.RoundDown,\n  [Rounding.ROUND_HALF_UP]: RoundingMode.RoundHalfUp,\n  [Rounding.ROUND_UP]: RoundingMode.RoundUp\n}\n\nexport class Fraction {\n  public readonly numerator: JSBI\n  public readonly denominator: JSBI\n\n  public constructor(numerator: BigintIsh, denominator: BigintIsh = JSBI.BigInt(1)) {\n    this.numerator = JSBI.BigInt(numerator)\n    this.denominator = JSBI.BigInt(denominator)\n  }\n\n  private static tryParseFraction(fractionish: BigintIsh | Fraction): Fraction {\n    if (fractionish instanceof JSBI || typeof fractionish === 'number' || typeof fractionish === 'string')\n      return new Fraction(fractionish)\n\n    if ('numerator' in fractionish && 'denominator' in fractionish) return fractionish\n    throw new Error('Could not parse fraction')\n  }\n\n  // performs floor division\n  public get quotient(): JSBI {\n    return JSBI.divide(this.numerator, this.denominator)\n  }\n\n  // remainder after floor division\n  public get remainder(): Fraction {\n    return new Fraction(JSBI.remainder(this.numerator, this.denominator), this.denominator)\n  }\n\n  public invert(): Fraction {\n    return new Fraction(this.denominator, this.numerator)\n  }\n\n  public add(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.add(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.add(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public subtract(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    if (JSBI.equal(this.denominator, otherParsed.denominator)) {\n      return new Fraction(JSBI.subtract(this.numerator, otherParsed.numerator), this.denominator)\n    }\n    return new Fraction(\n      JSBI.subtract(\n        JSBI.multiply(this.numerator, otherParsed.denominator),\n        JSBI.multiply(otherParsed.numerator, this.denominator)\n      ),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public lessThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.lessThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public equalTo(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.equal(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public greaterThan(other: Fraction | BigintIsh): boolean {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return JSBI.greaterThan(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(otherParsed.numerator, this.denominator)\n    )\n  }\n\n  public multiply(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.numerator),\n      JSBI.multiply(this.denominator, otherParsed.denominator)\n    )\n  }\n\n  public divide(other: Fraction | BigintIsh): Fraction {\n    const otherParsed = Fraction.tryParseFraction(other)\n    return new Fraction(\n      JSBI.multiply(this.numerator, otherParsed.denominator),\n      JSBI.multiply(this.denominator, otherParsed.numerator)\n    )\n  }\n\n  public toSignificant(\n    significantDigits: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(significantDigits), `${significantDigits} is not an integer.`)\n    invariant(significantDigits > 0, `${significantDigits} is not positive.`)\n\n    Decimal.set({ precision: significantDigits + 1, rounding: toSignificantRounding[rounding] })\n    const quotient = new Decimal(this.numerator.toString())\n      .div(this.denominator.toString())\n      .toSignificantDigits(significantDigits)\n    return quotient.toFormat(quotient.decimalPlaces(), format)\n  }\n\n  public toFixed(\n    decimalPlaces: number,\n    format: object = { groupSeparator: '' },\n    rounding: Rounding = Rounding.ROUND_HALF_UP\n  ): string {\n    invariant(Number.isInteger(decimalPlaces), `${decimalPlaces} is not an integer.`)\n    invariant(decimalPlaces >= 0, `${decimalPlaces} is negative.`)\n\n    Big.DP = decimalPlaces\n    Big.RM = toFixedRounding[rounding]\n    return new Big(this.numerator.toString()).div(this.denominator.toString()).toFormat(decimalPlaces, format)\n  }\n\n  /**\n   * Helper method for converting any super class back to a fraction\n   */\n  public get asFraction(): Fraction {\n    return new Fraction(this.numerator, this.denominator)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport JSBI from 'jsbi'\nimport { Currency } from '../currency'\nimport { Token } from '../token'\nimport { Fraction } from './fraction'\nimport _Big from 'big.js'\n\nimport toFormat from 'toformat'\nimport { BigintIsh, Rounding, MaxUint256 } from '../../constants'\n\nconst Big = toFormat(_Big)\n\nexport class CurrencyAmount<T extends Currency> extends Fraction {\n  public readonly currency: T\n  public readonly decimalScale: JSBI\n\n  /**\n   * Returns a new currency amount instance from the unitless amount of token, i.e. the raw amount\n   * @param currency the currency in the amount\n   * @param rawAmount the raw token or ether amount\n   */\n  public static fromRawAmount<T extends Currency>(currency: T, rawAmount: BigintIsh): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, rawAmount)\n  }\n\n  /**\n   * Construct a currency amount with a denominator that is not equal to 1\n   * @param currency the currency\n   * @param numerator the numerator of the fractional token amount\n   * @param denominator the denominator of the fractional token amount\n   */\n  public static fromFractionalAmount<T extends Currency>(\n    currency: T,\n    numerator: BigintIsh,\n    denominator: BigintIsh\n  ): CurrencyAmount<T> {\n    return new CurrencyAmount(currency, numerator, denominator)\n  }\n\n  protected constructor(currency: T, numerator: BigintIsh, denominator?: BigintIsh) {\n    super(numerator, denominator)\n    invariant(JSBI.lessThanOrEqual(this.quotient, MaxUint256), 'AMOUNT')\n    this.currency = currency\n    this.decimalScale = JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(currency.decimals))\n  }\n\n  public add(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const added = super.add(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, added.numerator, added.denominator)\n  }\n\n  public subtract(other: CurrencyAmount<T>): CurrencyAmount<T> {\n    invariant(this.currency.equals(other.currency), 'CURRENCY')\n    const subtracted = super.subtract(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, subtracted.numerator, subtracted.denominator)\n  }\n\n  public multiply(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const multiplied = super.multiply(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, multiplied.numerator, multiplied.denominator)\n  }\n\n  public divide(other: Fraction | BigintIsh): CurrencyAmount<T> {\n    const divided = super.divide(other)\n    return CurrencyAmount.fromFractionalAmount(this.currency, divided.numerator, divided.denominator)\n  }\n\n  public toSignificant(\n    significantDigits: number = 6,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    return super.divide(this.decimalScale).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(\n    decimalPlaces: number = this.currency.decimals,\n    format?: object,\n    rounding: Rounding = Rounding.ROUND_DOWN\n  ): string {\n    invariant(decimalPlaces <= this.currency.decimals, 'DECIMALS')\n    return super.divide(this.decimalScale).toFixed(decimalPlaces, format, rounding)\n  }\n\n  public toExact(format: object = { groupSeparator: '' }): string {\n    Big.DP = this.currency.decimals\n    return new Big(this.quotient.toString()).div(this.decimalScale.toString()).toFormat(format)\n  }\n\n  public get wrapped(): CurrencyAmount<Token> {\n    if (this.currency.isToken) return this as CurrencyAmount<Token>\n    return CurrencyAmount.fromFractionalAmount(this.currency.wrapped, this.numerator, this.denominator)\n  }\n}\n","import JSBI from 'jsbi'\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Fraction } from './fraction'\n\nconst ONE_HUNDRED = new Fraction(JSBI.BigInt(100))\n\n/**\n * Converts a fraction to a percent\n * @param fraction the fraction to convert\n */\nfunction toPercent(fraction: Fraction): Percent {\n  return new Percent(fraction.numerator, fraction.denominator)\n}\n\nexport class Percent extends Fraction {\n  /**\n   * This boolean prevents a fraction from being interpreted as a Percent\n   */\n  public readonly isPercent: true = true\n\n  add(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.add(other))\n  }\n\n  subtract(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.subtract(other))\n  }\n\n  multiply(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.multiply(other))\n  }\n\n  divide(other: Fraction | BigintIsh): Percent {\n    return toPercent(super.divide(other))\n  }\n\n  public toSignificant(significantDigits: number = 5, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 2, format?: object, rounding?: Rounding): string {\n    return super.multiply(ONE_HUNDRED).toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nimport { BigintIsh, Rounding } from '../../constants'\nimport { Currency } from '../currency'\nimport { Fraction } from './fraction'\nimport { CurrencyAmount } from './currencyAmount'\n\nexport class Price<TBase extends Currency, TQuote extends Currency> extends Fraction {\n  public readonly baseCurrency: TBase // input i.e. denominator\n  public readonly quoteCurrency: TQuote // output i.e. numerator\n  public readonly scalar: Fraction // used to adjust the raw fraction w/r/t the decimals of the {base,quote}Token\n\n  /**\n   * Construct a price, either with the base and quote currency amount, or the\n   * @param args\n   */\n  public constructor(\n    ...args:\n      | [TBase, TQuote, BigintIsh, BigintIsh]\n      | [{ baseAmount: CurrencyAmount<TBase>; quoteAmount: CurrencyAmount<TQuote> }]\n  ) {\n    let baseCurrency: TBase, quoteCurrency: TQuote, denominator: BigintIsh, numerator: BigintIsh\n\n    if (args.length === 4) {\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = args\n    } else {\n      const result = args[0].quoteAmount.divide(args[0].baseAmount)\n      ;[baseCurrency, quoteCurrency, denominator, numerator] = [\n        args[0].baseAmount.currency,\n        args[0].quoteAmount.currency,\n        result.denominator,\n        result.numerator\n      ]\n    }\n    super(numerator, denominator)\n\n    this.baseCurrency = baseCurrency\n    this.quoteCurrency = quoteCurrency\n    this.scalar = new Fraction(\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(baseCurrency.decimals)),\n      JSBI.exponentiate(JSBI.BigInt(10), JSBI.BigInt(quoteCurrency.decimals))\n    )\n  }\n\n  /**\n   * Flip the price, switching the base and quote currency\n   */\n  public invert(): Price<TQuote, TBase> {\n    return new Price(this.quoteCurrency, this.baseCurrency, this.numerator, this.denominator)\n  }\n\n  /**\n   * Multiply the price by another price, returning a new price. The other price must have the same base currency as this price's quote currency\n   * @param other the other price\n   */\n  public multiply<TOtherQuote extends Currency>(other: Price<TQuote, TOtherQuote>): Price<TBase, TOtherQuote> {\n    invariant(this.quoteCurrency.equals(other.baseCurrency), 'TOKEN')\n    const fraction = super.multiply(other)\n    return new Price(this.baseCurrency, other.quoteCurrency, fraction.denominator, fraction.numerator)\n  }\n\n  /**\n   * Return the amount of quote currency corresponding to a given amount of the base currency\n   * @param currencyAmount the amount of base currency to quote against the price\n   */\n  public quote(currencyAmount: CurrencyAmount<TBase>): CurrencyAmount<TQuote> {\n    invariant(currencyAmount.currency.equals(this.baseCurrency), 'TOKEN')\n    const result = super.multiply(currencyAmount)\n    return CurrencyAmount.fromFractionalAmount(this.quoteCurrency, result.numerator, result.denominator)\n  }\n\n  /**\n   * Get the value scaled by decimals for formatting\n   * @private\n   */\n  private get adjustedForDecimals(): Fraction {\n    return super.multiply(this.scalar)\n  }\n\n  public toSignificant(significantDigits: number = 6, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toSignificant(significantDigits, format, rounding)\n  }\n\n  public toFixed(decimalPlaces: number = 4, format?: object, rounding?: Rounding): string {\n    return this.adjustedForDecimals.toFixed(decimalPlaces, format, rounding)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { Token } from './token'\n\n/**\n * A currency is any fungible financial instrument, including Ether, all ERC20 tokens, and other chain-native currencies\n */\nexport abstract class BaseCurrency {\n  /**\n   * Returns whether the currency is native to the chain and must be wrapped (e.g. Ether)\n   */\n  public abstract readonly isNative: boolean\n  /**\n   * Returns whether the currency is a token that is usable in Uniswap without wrapping\n   */\n  public abstract readonly isToken: boolean\n\n  /**\n   * The chain ID on which this currency resides\n   */\n  public readonly chainId: number\n  /**\n   * The decimals used in representing currency amounts\n   */\n  public readonly decimals: number\n  /**\n   * The symbol of the currency, i.e. a short textual non-unique identifier\n   */\n  public readonly symbol?: string\n  /**\n   * The name of the currency, i.e. a descriptive textual non-unique identifier\n   */\n  public readonly name?: string\n\n  /**\n   * Constructs an instance of the base class `BaseCurrency`.\n   * @param chainId the chain ID on which this currency resides\n   * @param decimals decimals of the currency\n   * @param symbol symbol of the currency\n   * @param name of the currency\n   */\n  protected constructor(chainId: number, decimals: number, symbol?: string, name?: string) {\n    invariant(Number.isSafeInteger(chainId), 'CHAIN_ID')\n    invariant(decimals >= 0 && decimals < 255 && Number.isInteger(decimals), 'DECIMALS')\n\n    this.chainId = chainId\n    this.decimals = decimals\n    this.symbol = symbol\n    this.name = name\n  }\n\n  /**\n   * Returns whether this currency is functionally equivalent to the other currency\n   * @param other the other currency\n   */\n  public abstract equals(other: Currency): boolean\n\n  /**\n   * Return the wrapped version of this currency that can be used with the Uniswap contracts. Currencies must\n   * implement this to be used in Uniswap\n   */\n  public abstract get wrapped(): Token\n}\n","import { BaseCurrency } from './baseCurrency'\n\n/**\n * Represents the native currency of the chain on which it resides, e.g.\n */\nexport abstract class NativeCurrency extends BaseCurrency {\n  public readonly isNative: true = true\n  public readonly isToken: false = false\n}\n","import { getAddress } from '@ethersproject/address'\n\n/**\n * Validates an address and returns the parsed (checksummed) version of that address\n * @param address the unchecksummed hex address\n */\nexport function validateAndParseAddress(address: string): string {\n  try {\n    return getAddress(address)\n  } catch (error) {\n    throw new Error(`${address} is not a valid address.`)\n  }\n}\n","import invariant from 'tiny-invariant'\nimport { validateAndParseAddress } from '../utils/validateAndParseAddress'\nimport { BaseCurrency } from './baseCurrency'\nimport { Currency } from './currency'\n\n/**\n * Represents an ERC20 token with a unique address and some metadata.\n */\nexport class Token extends BaseCurrency {\n  public readonly isNative: false = false\n  public readonly isToken: true = true\n\n  /**\n   * The contract address on the chain on which this token lives\n   */\n  public readonly address: string\n\n  public constructor(chainId: number, address: string, decimals: number, symbol?: string, name?: string) {\n    super(chainId, decimals, symbol, name)\n    this.address = validateAndParseAddress(address)\n  }\n\n  /**\n   * Returns true if the two tokens are equivalent, i.e. have the same chainId and address.\n   * @param other other token to compare\n   */\n  public equals(other: Currency): boolean {\n    return other.isToken && this.chainId === other.chainId && this.address === other.address\n  }\n\n  /**\n   * Returns true if the address of this token sorts before the address of the other token\n   * @param other other token to compare\n   * @throws if the tokens have the same address\n   * @throws if the tokens are on different chains\n   */\n  public sortsBefore(other: Token): boolean {\n    invariant(this.chainId === other.chainId, 'CHAIN_IDS')\n    invariant(this.address !== other.address, 'ADDRESSES')\n    return this.address.toLowerCase() < other.address.toLowerCase()\n  }\n\n  /**\n   * Return this token, which does not need to be wrapped\n   */\n  public get wrapped(): Token {\n    return this\n  }\n}\n","import { Token } from './token'\n\n/**\n * Known WETH9 implementation addresses, used in our implementation of Ether#wrapped\n */\nexport const WETH9: { [chainId: number]: Token } = {\n  [1]: new Token(1, '0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2', 18, 'WETH', 'Wrapped Ether'),\n  [3]: new Token(3, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [4]: new Token(4, '0xc778417E063141139Fce010982780140Aa0cD5Ab', 18, 'WETH', 'Wrapped Ether'),\n  [5]: new Token(5, '0xB4FBF271143F4FBf7B91A5ded31805e42b2208d6', 18, 'WETH', 'Wrapped Ether'),\n  [42]: new Token(42, '0xd0A1E359811322d97991E03f863a0C30C2cF029C', 18, 'WETH', 'Wrapped Ether'),\n\n  [10]: new Token(10, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n  [69]: new Token(69, '0x4200000000000000000000000000000000000006', 18, 'WETH', 'Wrapped Ether'),\n\n  [42161]: new Token(42161, '0x82aF49447D8a07e3bd95BD0d56f35241523fBab1', 18, 'WETH', 'Wrapped Ether'),\n  [421611]: new Token(421611, '0xB47e6A5f8b33b3F17603C83a0535A9dcD7E32681', 18, 'WETH', 'Wrapped Ether')\n}\n","import invariant from 'tiny-invariant'\nimport { Currency } from './currency'\nimport { NativeCurrency } from './nativeCurrency'\nimport { Token } from './token'\nimport { WETH9 } from './weth9'\n\n/**\n * Ether is the main usage of a 'native' currency, i.e. for Ethereum mainnet and all testnets\n */\nexport class Ether extends NativeCurrency {\n  protected constructor(chainId: number) {\n    super(chainId, 18, 'ETH', 'Ether')\n  }\n\n  public get wrapped(): Token {\n    const weth9 = WETH9[this.chainId]\n    invariant(!!weth9, 'WRAPPED')\n    return weth9\n  }\n\n  private static _etherCache: { [chainId: number]: Ether } = {}\n\n  public static onChain(chainId: number): Ether {\n    return this._etherCache[chainId] ?? (this._etherCache[chainId] = new Ether(chainId))\n  }\n\n  public equals(other: Currency): boolean {\n    return other.isNative && other.chainId === this.chainId\n  }\n}\n","import { Currency, CurrencyAmount, Percent, Price } from '../entities'\n\n/**\n * Returns the percent difference between the mid price and the execution price, i.e. price impact.\n * @param midPrice mid price before the trade\n * @param inputAmount the input amount of the trade\n * @param outputAmount the output amount of the trade\n */\nexport function computePriceImpact<TBase extends Currency, TQuote extends Currency>(\n  midPrice: Price<TBase, TQuote>,\n  inputAmount: CurrencyAmount<TBase>,\n  outputAmount: CurrencyAmount<TQuote>\n): Percent {\n  const quotedOutputAmount = midPrice.quote(inputAmount)\n  // calculate price impact := (exactQuote - outputAmount) / exactQuote\n  const priceImpact = quotedOutputAmount.subtract(outputAmount).divide(quotedOutputAmount)\n  return new Percent(priceImpact.numerator, priceImpact.denominator)\n}\n","import invariant from 'tiny-invariant'\n\n// given an array of items sorted by `comparator`, insert an item into its sort index and constrain the size to\n// `maxSize` by removing the last item\nexport function sortedInsert<T>(items: T[], add: T, maxSize: number, comparator: (a: T, b: T) => number): T | null {\n  invariant(maxSize > 0, 'MAX_SIZE_ZERO')\n  // this is an invariant because the interface cannot return multiple removed items if items.length exceeds maxSize\n  invariant(items.length <= maxSize, 'ITEMS_SIZE')\n\n  // short circuit first item add\n  if (items.length === 0) {\n    items.push(add)\n    return null\n  } else {\n    const isFull = items.length === maxSize\n    // short circuit if full and the additional item does not come before the last item\n    if (isFull && comparator(items[items.length - 1], add) <= 0) {\n      return add\n    }\n\n    let lo = 0,\n      hi = items.length\n\n    while (lo < hi) {\n      const mid = (lo + hi) >>> 1\n      if (comparator(items[mid], add) <= 0) {\n        lo = mid + 1\n      } else {\n        hi = mid\n      }\n    }\n    items.splice(lo, 0, add)\n    return isFull ? items.pop()! : null\n  }\n}\n","import JSBI from 'jsbi'\nimport invariant from 'tiny-invariant'\n\nexport const MAX_SAFE_INTEGER = JSBI.BigInt(Number.MAX_SAFE_INTEGER)\n\nconst ZERO = JSBI.BigInt(0)\nconst ONE = JSBI.BigInt(1)\nconst TWO = JSBI.BigInt(2)\n\n/**\n * Computes floor(sqrt(value))\n * @param value the value for which to compute the square root, rounded down\n */\nexport function sqrt(value: JSBI): JSBI {\n  invariant(JSBI.greaterThanOrEqual(value, ZERO), 'NEGATIVE')\n\n  // rely on built in sqrt if possible\n  if (JSBI.lessThan(value, MAX_SAFE_INTEGER)) {\n    return JSBI.BigInt(Math.floor(Math.sqrt(JSBI.toNumber(value))))\n  }\n\n  let z: JSBI\n  let x: JSBI\n  z = value\n  x = JSBI.add(JSBI.divide(value, TWO), ONE)\n  while (JSBI.lessThan(x, z)) {\n    z = x\n    x = JSBI.divide(JSBI.add(JSBI.divide(value, x), x), TWO)\n  }\n  return z\n}\n"],"names":["TradeType","Rounding","MaxUint256","JSBI","BigInt","Decimal","toFormat","_Decimal","Big","_Big","toSignificantRounding","ROUND_DOWN","ROUND_HALF_UP","ROUND_UP","toFixedRounding","Fraction","numerator","denominator","tryParseFraction","fractionish","Error","invert","add","other","otherParsed","equal","multiply","subtract","lessThan","equalTo","greaterThan","divide","toSignificant","significantDigits","format","rounding","groupSeparator","Number","isInteger","invariant","set","precision","quotient","toString","div","toSignificantDigits","decimalPlaces","toFixed","DP","RM","remainder","CurrencyAmount","currency","lessThanOrEqual","decimalScale","exponentiate","decimals","fromRawAmount","rawAmount","fromFractionalAmount","equals","added","subtracted","multiplied","divided","toExact","isToken","wrapped","ONE_HUNDRED","toPercent","fraction","Percent","Price","baseCurrency","quoteCurrency","args","length","result","quoteAmount","baseAmount","scalar","quote","currencyAmount","adjustedForDecimals","BaseCurrency","chainId","symbol","name","isSafeInteger","NativeCurrency","validateAndParseAddress","address","getAddress","error","Token","sortsBefore","toLowerCase","WETH9","Ether","onChain","_etherCache","isNative","weth9","computePriceImpact","midPrice","inputAmount","outputAmount","quotedOutputAmount","priceImpact","sortedInsert","items","maxSize","comparator","push","isFull","lo","hi","mid","splice","pop","MAX_SAFE_INTEGER","ZERO","ONE","TWO","sqrt","value","greaterThanOrEqual","Math","floor","toNumber","z","x"],"mappings":"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"}